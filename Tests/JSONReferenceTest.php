<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-23 at 18:59:23.
 */
class JSONReferenceTest extends PHPUnit_Framework_TestCase {

    protected function setUp() {
        require_once '../JSONReference.php';
    }

    protected function tearDown() {
        
    }

    public function testEncodeString() {
        $data = 'MyString';

        $result = JSONReference::encode($data);

        $this->assertEquals('MyString', $data);
        $this->assertEquals('MyString', $result->root);
    }

    public function testEncodeInteger() {
        $data = 10;

        $result = JSONReference::encode($data);

        $this->assertEquals(10, $data);
        $this->assertEquals(10, $result->root);
    }

    public function testEncodeArray() {
        $data = array('A', 'B', 'C');

        $result = JSONReference::encode($data);

        $this->assertEquals(array('A', 'B', 'C'), $data);
        $this->assertEquals(array('A', 'B', 'C'), $result->root);
    }

    public function testEncodeObject() {
        $data = (object) array('A', 'B', 'C');

        $result = JSONReference::encode($data);

        $this->assertEquals((object) array('A', 'B', 'C'), $data);
        $this->assertEquals('@', substr($result->root, 0, 1));
        $this->assertEquals((object) array('A', 'B', 'C'), $result->objects->{$result->root});
    }

    public function testEncodeCircularObjects() {
        $personA = (object) array('firstname' => 'Max', 'parent' => null, 'children' => null);
        $personB = (object) array('firstname' => 'Manfred', 'parent' => null, 'children' => null);

        $personA->children = array($personB);
        $personB->parent = $personA;

        $result = JSONReference::encode($personA);

        $this->assertEquals('Max', $personA->firstname);
        $this->assertEquals('Manfred', $personB->firstname);

        $this->assertEquals('@', substr($result->root, 0, 1));
        $this->assertEquals('Max', $result->objects->{$result->root}->firstname);

        $hash = $result->objects->{$result->root}->children[0];
        $this->assertEquals('Manfred', $result->objects->{$hash}->firstname);
    }

    public function testDecodeCircularObjectsFromJson() {
        $json = '{"root":"@000000005750c50c000000000ea0522a","objects":{"@000000005750c513000000000ea0522a":{"firstname":"Manfred","parent":"@000000005750c50c000000000ea0522a","children":null},"@000000005750c50c000000000ea0522a":{"firstname":"Max","parent":null,"children":["@000000005750c513000000000ea0522a"]}}}';

        $personA = JSONReference::decode(json_decode($json));

        $this->assertEquals('Max', $personA->firstname);
        $this->assertEquals('Manfred', $personA->children[0]->firstname);
        $this->assertEquals('Max', $personA->children[0]->parent->firstname);
        
        $personA->firstname = 'Not Max';
        
        $this->assertEquals('Not Max', $personA->firstname);
        $this->assertEquals('Manfred', $personA->children[0]->firstname);
        $this->assertEquals('Not Max', $personA->children[0]->parent->firstname);
    }

}
